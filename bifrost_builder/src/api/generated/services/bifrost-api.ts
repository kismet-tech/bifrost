/* tslint:disable */
/* eslint-disable */
/**
 * Kismet Backend
 * Kismet Backend API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AttemptToPrefillKismetFieldUsingPriorResponsesRequestDto } from '../types';
// @ts-ignore
import type { BifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses200Response } from '../types';
// @ts-ignore
import type { BifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace200Response } from '../types';
// @ts-ignore
import type { BifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates200Response } from '../types';
// @ts-ignore
import type { BifrostControllerGetBifrostFormFarewellMessage200Response } from '../types';
// @ts-ignore
import type { BifrostControllerGetBifrostFormGreeting200Response } from '../types';
// @ts-ignore
import type { BifrostControllerGetBifrostSinglePayerCheckoutUrl200Response } from '../types';
// @ts-ignore
import type { BifrostControllerGetBifrostSplitPayerCheckoutUrl200Response } from '../types';
// @ts-ignore
import type { BifrostControllerGetOrCreateBifrostTravelerId200Response } from '../types';
// @ts-ignore
import type { BifrostControllerGetSinglePayerFirmDateInstantBookOffers200Response } from '../types';
// @ts-ignore
import type { BifrostControllerGetSinglePayerFlexibleDateInstantBookOffers200Response } from '../types';
// @ts-ignore
import type { BifrostControllerGetSplitPayerInstantBookOffers200Response } from '../types';
// @ts-ignore
import type { BifrostControllerJoinTravelerWithKismetCampaign200Response } from '../types';
// @ts-ignore
import type { BifrostControllerMaybeGetInstantBookOffers200Response } from '../types';
// @ts-ignore
import type { BifrostControllerRegisterBifrostFormInput200Response } from '../types';
// @ts-ignore
import type { BifrostControllerRegisterBifrostPageVisit200Response } from '../types';
// @ts-ignore
import type { BifrostControllerSubmitBifrostForm200Response } from '../types';
// @ts-ignore
import type { BifrostControllerUpdateBifrostItineraryOffer200Response } from '../types';
// @ts-ignore
import type { BifrostControllerUpdateBifrostUserSession200Response } from '../types';
// @ts-ignore
import type { DetermineIfBifrostTravelerRequiresAnEventSpaceRequestDto } from '../types';
// @ts-ignore
import type { DetermineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto } from '../types';
// @ts-ignore
import type { GetBifrostFormFarewellMessageRequestDto } from '../types';
// @ts-ignore
import type { GetBifrostFormGreetingRequestDto } from '../types';
// @ts-ignore
import type { GetBifrostSinglePayerCheckoutUrlRequestDto } from '../types';
// @ts-ignore
import type { GetBifrostSplitPayerCheckoutUrlRequestDto } from '../types';
// @ts-ignore
import type { GetSinglePayerFirmDateInstantBookOffersRequestDto } from '../types';
// @ts-ignore
import type { GetSinglePayerFlexibleDateInstantBookOffersRequestDto } from '../types';
// @ts-ignore
import type { GetSplitPayerInstantBookOffersRequestDto } from '../types';
// @ts-ignore
import type { JoinTravelerWithKismetCampaignRequestDto } from '../types';
// @ts-ignore
import type { MaybeGetInstantBookOffersRequestDto } from '../types';
// @ts-ignore
import type { RegisterBifrostFormInputRequestDto } from '../types';
// @ts-ignore
import type { RegisterBifrostPageVisitRequestDto } from '../types';
// @ts-ignore
import type { SubmitBifrostFormRequestDto } from '../types';
// @ts-ignore
import type { UpdateBifrostItineraryOfferRequestDto } from '../types';
// @ts-ignore
import type { UpdateBifrostUserSessionRequestDto } from '../types';
/**
 * BifrostApi - axios parameter creator
 * @export
 */
export const BifrostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AttemptToPrefillKismetFieldUsingPriorResponsesRequestDto} attemptToPrefillKismetFieldUsingPriorResponsesRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses: async (attemptToPrefillKismetFieldUsingPriorResponsesRequestDto: AttemptToPrefillKismetFieldUsingPriorResponsesRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attemptToPrefillKismetFieldUsingPriorResponsesRequestDto' is not null or undefined
            assertParamExists('bifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses', 'attemptToPrefillKismetFieldUsingPriorResponsesRequestDto', attemptToPrefillKismetFieldUsingPriorResponsesRequestDto)
            const localVarPath = `/Bifrost/AttemptToPrefillKismetFieldUsingPriorResponses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attemptToPrefillKismetFieldUsingPriorResponsesRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DetermineIfBifrostTravelerRequiresAnEventSpaceRequestDto} determineIfBifrostTravelerRequiresAnEventSpaceRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace: async (determineIfBifrostTravelerRequiresAnEventSpaceRequestDto: DetermineIfBifrostTravelerRequiresAnEventSpaceRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'determineIfBifrostTravelerRequiresAnEventSpaceRequestDto' is not null or undefined
            assertParamExists('bifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace', 'determineIfBifrostTravelerRequiresAnEventSpaceRequestDto', determineIfBifrostTravelerRequiresAnEventSpaceRequestDto)
            const localVarPath = `/Bifrost/DetermineIfBifrostTravelerRequiresAnEventSpace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(determineIfBifrostTravelerRequiresAnEventSpaceRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DetermineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto} determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates: async (determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto: DetermineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto' is not null or undefined
            assertParamExists('bifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates', 'determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto', determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto)
            const localVarPath = `/Bifrost/DetermineIfRoomsAreAvailableForBifrostTravelerOnDates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetBifrostFormFarewellMessageRequestDto} getBifrostFormFarewellMessageRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetBifrostFormFarewellMessage: async (getBifrostFormFarewellMessageRequestDto: GetBifrostFormFarewellMessageRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getBifrostFormFarewellMessageRequestDto' is not null or undefined
            assertParamExists('bifrostControllerGetBifrostFormFarewellMessage', 'getBifrostFormFarewellMessageRequestDto', getBifrostFormFarewellMessageRequestDto)
            const localVarPath = `/Bifrost/GetBifrostFormFarewellMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBifrostFormFarewellMessageRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetBifrostFormGreetingRequestDto} getBifrostFormGreetingRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetBifrostFormGreeting: async (getBifrostFormGreetingRequestDto: GetBifrostFormGreetingRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getBifrostFormGreetingRequestDto' is not null or undefined
            assertParamExists('bifrostControllerGetBifrostFormGreeting', 'getBifrostFormGreetingRequestDto', getBifrostFormGreetingRequestDto)
            const localVarPath = `/Bifrost/GetBifrostFormGreeting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBifrostFormGreetingRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetBifrostSinglePayerCheckoutUrlRequestDto} getBifrostSinglePayerCheckoutUrlRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetBifrostSinglePayerCheckoutUrl: async (getBifrostSinglePayerCheckoutUrlRequestDto: GetBifrostSinglePayerCheckoutUrlRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getBifrostSinglePayerCheckoutUrlRequestDto' is not null or undefined
            assertParamExists('bifrostControllerGetBifrostSinglePayerCheckoutUrl', 'getBifrostSinglePayerCheckoutUrlRequestDto', getBifrostSinglePayerCheckoutUrlRequestDto)
            const localVarPath = `/Bifrost/GetBifrostSinglePayerCheckoutUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBifrostSinglePayerCheckoutUrlRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetBifrostSplitPayerCheckoutUrlRequestDto} getBifrostSplitPayerCheckoutUrlRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetBifrostSplitPayerCheckoutUrl: async (getBifrostSplitPayerCheckoutUrlRequestDto: GetBifrostSplitPayerCheckoutUrlRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getBifrostSplitPayerCheckoutUrlRequestDto' is not null or undefined
            assertParamExists('bifrostControllerGetBifrostSplitPayerCheckoutUrl', 'getBifrostSplitPayerCheckoutUrlRequestDto', getBifrostSplitPayerCheckoutUrlRequestDto)
            const localVarPath = `/Bifrost/GetBifrostSplitPayerCheckoutUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBifrostSplitPayerCheckoutUrlRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetOrCreateBifrostTravelerId: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('bifrostControllerGetOrCreateBifrostTravelerId', 'body', body)
            const localVarPath = `/Bifrost/GetOrCreateBifrostTravelerId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetSinglePayerFirmDateInstantBookOffersRequestDto} getSinglePayerFirmDateInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetSinglePayerFirmDateInstantBookOffers: async (getSinglePayerFirmDateInstantBookOffersRequestDto: GetSinglePayerFirmDateInstantBookOffersRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getSinglePayerFirmDateInstantBookOffersRequestDto' is not null or undefined
            assertParamExists('bifrostControllerGetSinglePayerFirmDateInstantBookOffers', 'getSinglePayerFirmDateInstantBookOffersRequestDto', getSinglePayerFirmDateInstantBookOffersRequestDto)
            const localVarPath = `/Bifrost/GetSinglePayerFirmDateInstantBookOffers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getSinglePayerFirmDateInstantBookOffersRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetSinglePayerFlexibleDateInstantBookOffersRequestDto} getSinglePayerFlexibleDateInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetSinglePayerFlexibleDateInstantBookOffers: async (getSinglePayerFlexibleDateInstantBookOffersRequestDto: GetSinglePayerFlexibleDateInstantBookOffersRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getSinglePayerFlexibleDateInstantBookOffersRequestDto' is not null or undefined
            assertParamExists('bifrostControllerGetSinglePayerFlexibleDateInstantBookOffers', 'getSinglePayerFlexibleDateInstantBookOffersRequestDto', getSinglePayerFlexibleDateInstantBookOffersRequestDto)
            const localVarPath = `/Bifrost/GetSinglePayerFlexibleDateInstantBookOffers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getSinglePayerFlexibleDateInstantBookOffersRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetSplitPayerInstantBookOffersRequestDto} getSplitPayerInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetSplitPayerInstantBookOffers: async (getSplitPayerInstantBookOffersRequestDto: GetSplitPayerInstantBookOffersRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getSplitPayerInstantBookOffersRequestDto' is not null or undefined
            assertParamExists('bifrostControllerGetSplitPayerInstantBookOffers', 'getSplitPayerInstantBookOffersRequestDto', getSplitPayerInstantBookOffersRequestDto)
            const localVarPath = `/Bifrost/GetSplitPayerInstantBookOffers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getSplitPayerInstantBookOffersRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JoinTravelerWithKismetCampaignRequestDto} joinTravelerWithKismetCampaignRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerJoinTravelerWithKismetCampaign: async (joinTravelerWithKismetCampaignRequestDto: JoinTravelerWithKismetCampaignRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'joinTravelerWithKismetCampaignRequestDto' is not null or undefined
            assertParamExists('bifrostControllerJoinTravelerWithKismetCampaign', 'joinTravelerWithKismetCampaignRequestDto', joinTravelerWithKismetCampaignRequestDto)
            const localVarPath = `/Bifrost/JoinTravelerWithKismetCampaign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinTravelerWithKismetCampaignRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MaybeGetInstantBookOffersRequestDto} maybeGetInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerMaybeGetInstantBookOffers: async (maybeGetInstantBookOffersRequestDto: MaybeGetInstantBookOffersRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'maybeGetInstantBookOffersRequestDto' is not null or undefined
            assertParamExists('bifrostControllerMaybeGetInstantBookOffers', 'maybeGetInstantBookOffersRequestDto', maybeGetInstantBookOffersRequestDto)
            const localVarPath = `/Bifrost/MaybeGetInstantBookOffers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(maybeGetInstantBookOffersRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterBifrostFormInputRequestDto} registerBifrostFormInputRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerRegisterBifrostFormInput: async (registerBifrostFormInputRequestDto: RegisterBifrostFormInputRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerBifrostFormInputRequestDto' is not null or undefined
            assertParamExists('bifrostControllerRegisterBifrostFormInput', 'registerBifrostFormInputRequestDto', registerBifrostFormInputRequestDto)
            const localVarPath = `/Bifrost/RegisterBifrostFormInput`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerBifrostFormInputRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterBifrostPageVisitRequestDto} registerBifrostPageVisitRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerRegisterBifrostPageVisit: async (registerBifrostPageVisitRequestDto: RegisterBifrostPageVisitRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerBifrostPageVisitRequestDto' is not null or undefined
            assertParamExists('bifrostControllerRegisterBifrostPageVisit', 'registerBifrostPageVisitRequestDto', registerBifrostPageVisitRequestDto)
            const localVarPath = `/Bifrost/RegisterBifrostPageVisit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerBifrostPageVisitRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubmitBifrostFormRequestDto} submitBifrostFormRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerSubmitBifrostForm: async (submitBifrostFormRequestDto: SubmitBifrostFormRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submitBifrostFormRequestDto' is not null or undefined
            assertParamExists('bifrostControllerSubmitBifrostForm', 'submitBifrostFormRequestDto', submitBifrostFormRequestDto)
            const localVarPath = `/Bifrost/SubmitBifrostForm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitBifrostFormRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateBifrostItineraryOfferRequestDto} updateBifrostItineraryOfferRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerUpdateBifrostItineraryOffer: async (updateBifrostItineraryOfferRequestDto: UpdateBifrostItineraryOfferRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateBifrostItineraryOfferRequestDto' is not null or undefined
            assertParamExists('bifrostControllerUpdateBifrostItineraryOffer', 'updateBifrostItineraryOfferRequestDto', updateBifrostItineraryOfferRequestDto)
            const localVarPath = `/Bifrost/UpdateBifrostItineraryOffer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBifrostItineraryOfferRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateBifrostUserSessionRequestDto} updateBifrostUserSessionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerUpdateBifrostUserSession: async (updateBifrostUserSessionRequestDto: UpdateBifrostUserSessionRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateBifrostUserSessionRequestDto' is not null or undefined
            assertParamExists('bifrostControllerUpdateBifrostUserSession', 'updateBifrostUserSessionRequestDto', updateBifrostUserSessionRequestDto)
            const localVarPath = `/Bifrost/UpdateBifrostUserSession`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBifrostUserSessionRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BifrostApi - functional programming interface
 * @export
 */
export const BifrostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BifrostApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AttemptToPrefillKismetFieldUsingPriorResponsesRequestDto} attemptToPrefillKismetFieldUsingPriorResponsesRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses(attemptToPrefillKismetFieldUsingPriorResponsesRequestDto: AttemptToPrefillKismetFieldUsingPriorResponsesRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses(attemptToPrefillKismetFieldUsingPriorResponsesRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DetermineIfBifrostTravelerRequiresAnEventSpaceRequestDto} determineIfBifrostTravelerRequiresAnEventSpaceRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace(determineIfBifrostTravelerRequiresAnEventSpaceRequestDto: DetermineIfBifrostTravelerRequiresAnEventSpaceRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace(determineIfBifrostTravelerRequiresAnEventSpaceRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DetermineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto} determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates(determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto: DetermineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates(determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetBifrostFormFarewellMessageRequestDto} getBifrostFormFarewellMessageRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerGetBifrostFormFarewellMessage(getBifrostFormFarewellMessageRequestDto: GetBifrostFormFarewellMessageRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerGetBifrostFormFarewellMessage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerGetBifrostFormFarewellMessage(getBifrostFormFarewellMessageRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerGetBifrostFormFarewellMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetBifrostFormGreetingRequestDto} getBifrostFormGreetingRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerGetBifrostFormGreeting(getBifrostFormGreetingRequestDto: GetBifrostFormGreetingRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerGetBifrostFormGreeting200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerGetBifrostFormGreeting(getBifrostFormGreetingRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerGetBifrostFormGreeting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetBifrostSinglePayerCheckoutUrlRequestDto} getBifrostSinglePayerCheckoutUrlRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerGetBifrostSinglePayerCheckoutUrl(getBifrostSinglePayerCheckoutUrlRequestDto: GetBifrostSinglePayerCheckoutUrlRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerGetBifrostSinglePayerCheckoutUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerGetBifrostSinglePayerCheckoutUrl(getBifrostSinglePayerCheckoutUrlRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerGetBifrostSinglePayerCheckoutUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetBifrostSplitPayerCheckoutUrlRequestDto} getBifrostSplitPayerCheckoutUrlRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerGetBifrostSplitPayerCheckoutUrl(getBifrostSplitPayerCheckoutUrlRequestDto: GetBifrostSplitPayerCheckoutUrlRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerGetBifrostSplitPayerCheckoutUrl200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerGetBifrostSplitPayerCheckoutUrl(getBifrostSplitPayerCheckoutUrlRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerGetBifrostSplitPayerCheckoutUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerGetOrCreateBifrostTravelerId(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerGetOrCreateBifrostTravelerId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerGetOrCreateBifrostTravelerId(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerGetOrCreateBifrostTravelerId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetSinglePayerFirmDateInstantBookOffersRequestDto} getSinglePayerFirmDateInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerGetSinglePayerFirmDateInstantBookOffers(getSinglePayerFirmDateInstantBookOffersRequestDto: GetSinglePayerFirmDateInstantBookOffersRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerGetSinglePayerFirmDateInstantBookOffers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerGetSinglePayerFirmDateInstantBookOffers(getSinglePayerFirmDateInstantBookOffersRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerGetSinglePayerFirmDateInstantBookOffers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetSinglePayerFlexibleDateInstantBookOffersRequestDto} getSinglePayerFlexibleDateInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerGetSinglePayerFlexibleDateInstantBookOffers(getSinglePayerFlexibleDateInstantBookOffersRequestDto: GetSinglePayerFlexibleDateInstantBookOffersRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerGetSinglePayerFlexibleDateInstantBookOffers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerGetSinglePayerFlexibleDateInstantBookOffers(getSinglePayerFlexibleDateInstantBookOffersRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerGetSinglePayerFlexibleDateInstantBookOffers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetSplitPayerInstantBookOffersRequestDto} getSplitPayerInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerGetSplitPayerInstantBookOffers(getSplitPayerInstantBookOffersRequestDto: GetSplitPayerInstantBookOffersRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerGetSplitPayerInstantBookOffers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerGetSplitPayerInstantBookOffers(getSplitPayerInstantBookOffersRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerGetSplitPayerInstantBookOffers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {JoinTravelerWithKismetCampaignRequestDto} joinTravelerWithKismetCampaignRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerJoinTravelerWithKismetCampaign(joinTravelerWithKismetCampaignRequestDto: JoinTravelerWithKismetCampaignRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerJoinTravelerWithKismetCampaign200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerJoinTravelerWithKismetCampaign(joinTravelerWithKismetCampaignRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerJoinTravelerWithKismetCampaign']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MaybeGetInstantBookOffersRequestDto} maybeGetInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerMaybeGetInstantBookOffers(maybeGetInstantBookOffersRequestDto: MaybeGetInstantBookOffersRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerMaybeGetInstantBookOffers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerMaybeGetInstantBookOffers(maybeGetInstantBookOffersRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerMaybeGetInstantBookOffers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterBifrostFormInputRequestDto} registerBifrostFormInputRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerRegisterBifrostFormInput(registerBifrostFormInputRequestDto: RegisterBifrostFormInputRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerRegisterBifrostFormInput200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerRegisterBifrostFormInput(registerBifrostFormInputRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerRegisterBifrostFormInput']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterBifrostPageVisitRequestDto} registerBifrostPageVisitRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerRegisterBifrostPageVisit(registerBifrostPageVisitRequestDto: RegisterBifrostPageVisitRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerRegisterBifrostPageVisit200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerRegisterBifrostPageVisit(registerBifrostPageVisitRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerRegisterBifrostPageVisit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SubmitBifrostFormRequestDto} submitBifrostFormRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerSubmitBifrostForm(submitBifrostFormRequestDto: SubmitBifrostFormRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerSubmitBifrostForm200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerSubmitBifrostForm(submitBifrostFormRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerSubmitBifrostForm']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateBifrostItineraryOfferRequestDto} updateBifrostItineraryOfferRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerUpdateBifrostItineraryOffer(updateBifrostItineraryOfferRequestDto: UpdateBifrostItineraryOfferRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerUpdateBifrostItineraryOffer200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerUpdateBifrostItineraryOffer(updateBifrostItineraryOfferRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerUpdateBifrostItineraryOffer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateBifrostUserSessionRequestDto} updateBifrostUserSessionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bifrostControllerUpdateBifrostUserSession(updateBifrostUserSessionRequestDto: UpdateBifrostUserSessionRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BifrostControllerUpdateBifrostUserSession200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bifrostControllerUpdateBifrostUserSession(updateBifrostUserSessionRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BifrostApi.bifrostControllerUpdateBifrostUserSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BifrostApi - factory interface
 * @export
 */
export const BifrostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BifrostApiFp(configuration)
    return {
        /**
         * 
         * @param {AttemptToPrefillKismetFieldUsingPriorResponsesRequestDto} attemptToPrefillKismetFieldUsingPriorResponsesRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses(attemptToPrefillKismetFieldUsingPriorResponsesRequestDto: AttemptToPrefillKismetFieldUsingPriorResponsesRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses200Response> {
            return localVarFp.bifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses(attemptToPrefillKismetFieldUsingPriorResponsesRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DetermineIfBifrostTravelerRequiresAnEventSpaceRequestDto} determineIfBifrostTravelerRequiresAnEventSpaceRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace(determineIfBifrostTravelerRequiresAnEventSpaceRequestDto: DetermineIfBifrostTravelerRequiresAnEventSpaceRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace200Response> {
            return localVarFp.bifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace(determineIfBifrostTravelerRequiresAnEventSpaceRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DetermineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto} determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates(determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto: DetermineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates200Response> {
            return localVarFp.bifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates(determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetBifrostFormFarewellMessageRequestDto} getBifrostFormFarewellMessageRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetBifrostFormFarewellMessage(getBifrostFormFarewellMessageRequestDto: GetBifrostFormFarewellMessageRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerGetBifrostFormFarewellMessage200Response> {
            return localVarFp.bifrostControllerGetBifrostFormFarewellMessage(getBifrostFormFarewellMessageRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetBifrostFormGreetingRequestDto} getBifrostFormGreetingRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetBifrostFormGreeting(getBifrostFormGreetingRequestDto: GetBifrostFormGreetingRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerGetBifrostFormGreeting200Response> {
            return localVarFp.bifrostControllerGetBifrostFormGreeting(getBifrostFormGreetingRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetBifrostSinglePayerCheckoutUrlRequestDto} getBifrostSinglePayerCheckoutUrlRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetBifrostSinglePayerCheckoutUrl(getBifrostSinglePayerCheckoutUrlRequestDto: GetBifrostSinglePayerCheckoutUrlRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerGetBifrostSinglePayerCheckoutUrl200Response> {
            return localVarFp.bifrostControllerGetBifrostSinglePayerCheckoutUrl(getBifrostSinglePayerCheckoutUrlRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetBifrostSplitPayerCheckoutUrlRequestDto} getBifrostSplitPayerCheckoutUrlRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetBifrostSplitPayerCheckoutUrl(getBifrostSplitPayerCheckoutUrlRequestDto: GetBifrostSplitPayerCheckoutUrlRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerGetBifrostSplitPayerCheckoutUrl200Response> {
            return localVarFp.bifrostControllerGetBifrostSplitPayerCheckoutUrl(getBifrostSplitPayerCheckoutUrlRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetOrCreateBifrostTravelerId(body: object, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerGetOrCreateBifrostTravelerId200Response> {
            return localVarFp.bifrostControllerGetOrCreateBifrostTravelerId(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetSinglePayerFirmDateInstantBookOffersRequestDto} getSinglePayerFirmDateInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetSinglePayerFirmDateInstantBookOffers(getSinglePayerFirmDateInstantBookOffersRequestDto: GetSinglePayerFirmDateInstantBookOffersRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerGetSinglePayerFirmDateInstantBookOffers200Response> {
            return localVarFp.bifrostControllerGetSinglePayerFirmDateInstantBookOffers(getSinglePayerFirmDateInstantBookOffersRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetSinglePayerFlexibleDateInstantBookOffersRequestDto} getSinglePayerFlexibleDateInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetSinglePayerFlexibleDateInstantBookOffers(getSinglePayerFlexibleDateInstantBookOffersRequestDto: GetSinglePayerFlexibleDateInstantBookOffersRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerGetSinglePayerFlexibleDateInstantBookOffers200Response> {
            return localVarFp.bifrostControllerGetSinglePayerFlexibleDateInstantBookOffers(getSinglePayerFlexibleDateInstantBookOffersRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetSplitPayerInstantBookOffersRequestDto} getSplitPayerInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerGetSplitPayerInstantBookOffers(getSplitPayerInstantBookOffersRequestDto: GetSplitPayerInstantBookOffersRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerGetSplitPayerInstantBookOffers200Response> {
            return localVarFp.bifrostControllerGetSplitPayerInstantBookOffers(getSplitPayerInstantBookOffersRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JoinTravelerWithKismetCampaignRequestDto} joinTravelerWithKismetCampaignRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerJoinTravelerWithKismetCampaign(joinTravelerWithKismetCampaignRequestDto: JoinTravelerWithKismetCampaignRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerJoinTravelerWithKismetCampaign200Response> {
            return localVarFp.bifrostControllerJoinTravelerWithKismetCampaign(joinTravelerWithKismetCampaignRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MaybeGetInstantBookOffersRequestDto} maybeGetInstantBookOffersRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerMaybeGetInstantBookOffers(maybeGetInstantBookOffersRequestDto: MaybeGetInstantBookOffersRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerMaybeGetInstantBookOffers200Response> {
            return localVarFp.bifrostControllerMaybeGetInstantBookOffers(maybeGetInstantBookOffersRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterBifrostFormInputRequestDto} registerBifrostFormInputRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerRegisterBifrostFormInput(registerBifrostFormInputRequestDto: RegisterBifrostFormInputRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerRegisterBifrostFormInput200Response> {
            return localVarFp.bifrostControllerRegisterBifrostFormInput(registerBifrostFormInputRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterBifrostPageVisitRequestDto} registerBifrostPageVisitRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerRegisterBifrostPageVisit(registerBifrostPageVisitRequestDto: RegisterBifrostPageVisitRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerRegisterBifrostPageVisit200Response> {
            return localVarFp.bifrostControllerRegisterBifrostPageVisit(registerBifrostPageVisitRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubmitBifrostFormRequestDto} submitBifrostFormRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerSubmitBifrostForm(submitBifrostFormRequestDto: SubmitBifrostFormRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerSubmitBifrostForm200Response> {
            return localVarFp.bifrostControllerSubmitBifrostForm(submitBifrostFormRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateBifrostItineraryOfferRequestDto} updateBifrostItineraryOfferRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerUpdateBifrostItineraryOffer(updateBifrostItineraryOfferRequestDto: UpdateBifrostItineraryOfferRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerUpdateBifrostItineraryOffer200Response> {
            return localVarFp.bifrostControllerUpdateBifrostItineraryOffer(updateBifrostItineraryOfferRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateBifrostUserSessionRequestDto} updateBifrostUserSessionRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bifrostControllerUpdateBifrostUserSession(updateBifrostUserSessionRequestDto: UpdateBifrostUserSessionRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<BifrostControllerUpdateBifrostUserSession200Response> {
            return localVarFp.bifrostControllerUpdateBifrostUserSession(updateBifrostUserSessionRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BifrostApi - object-oriented interface
 * @export
 * @class BifrostApi
 * @extends {BaseAPI}
 */
export class BifrostApi extends BaseAPI {
    /**
     * 
     * @param {AttemptToPrefillKismetFieldUsingPriorResponsesRequestDto} attemptToPrefillKismetFieldUsingPriorResponsesRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses(attemptToPrefillKismetFieldUsingPriorResponsesRequestDto: AttemptToPrefillKismetFieldUsingPriorResponsesRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerAttemptToPrefillKismetFieldUsingPriorResponses(attemptToPrefillKismetFieldUsingPriorResponsesRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DetermineIfBifrostTravelerRequiresAnEventSpaceRequestDto} determineIfBifrostTravelerRequiresAnEventSpaceRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace(determineIfBifrostTravelerRequiresAnEventSpaceRequestDto: DetermineIfBifrostTravelerRequiresAnEventSpaceRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerDetermineIfBifrostTravelerRequiresAnEventSpace(determineIfBifrostTravelerRequiresAnEventSpaceRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DetermineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto} determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates(determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto: DetermineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerDetermineIfRoomsAreAvailableForBifrostTravelerOnDates(determineIfRoomsAreAvailableForBifrostTravelerOnDatesRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetBifrostFormFarewellMessageRequestDto} getBifrostFormFarewellMessageRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerGetBifrostFormFarewellMessage(getBifrostFormFarewellMessageRequestDto: GetBifrostFormFarewellMessageRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerGetBifrostFormFarewellMessage(getBifrostFormFarewellMessageRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetBifrostFormGreetingRequestDto} getBifrostFormGreetingRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerGetBifrostFormGreeting(getBifrostFormGreetingRequestDto: GetBifrostFormGreetingRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerGetBifrostFormGreeting(getBifrostFormGreetingRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetBifrostSinglePayerCheckoutUrlRequestDto} getBifrostSinglePayerCheckoutUrlRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerGetBifrostSinglePayerCheckoutUrl(getBifrostSinglePayerCheckoutUrlRequestDto: GetBifrostSinglePayerCheckoutUrlRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerGetBifrostSinglePayerCheckoutUrl(getBifrostSinglePayerCheckoutUrlRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetBifrostSplitPayerCheckoutUrlRequestDto} getBifrostSplitPayerCheckoutUrlRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerGetBifrostSplitPayerCheckoutUrl(getBifrostSplitPayerCheckoutUrlRequestDto: GetBifrostSplitPayerCheckoutUrlRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerGetBifrostSplitPayerCheckoutUrl(getBifrostSplitPayerCheckoutUrlRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerGetOrCreateBifrostTravelerId(body: object, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerGetOrCreateBifrostTravelerId(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetSinglePayerFirmDateInstantBookOffersRequestDto} getSinglePayerFirmDateInstantBookOffersRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerGetSinglePayerFirmDateInstantBookOffers(getSinglePayerFirmDateInstantBookOffersRequestDto: GetSinglePayerFirmDateInstantBookOffersRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerGetSinglePayerFirmDateInstantBookOffers(getSinglePayerFirmDateInstantBookOffersRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetSinglePayerFlexibleDateInstantBookOffersRequestDto} getSinglePayerFlexibleDateInstantBookOffersRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerGetSinglePayerFlexibleDateInstantBookOffers(getSinglePayerFlexibleDateInstantBookOffersRequestDto: GetSinglePayerFlexibleDateInstantBookOffersRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerGetSinglePayerFlexibleDateInstantBookOffers(getSinglePayerFlexibleDateInstantBookOffersRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetSplitPayerInstantBookOffersRequestDto} getSplitPayerInstantBookOffersRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerGetSplitPayerInstantBookOffers(getSplitPayerInstantBookOffersRequestDto: GetSplitPayerInstantBookOffersRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerGetSplitPayerInstantBookOffers(getSplitPayerInstantBookOffersRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JoinTravelerWithKismetCampaignRequestDto} joinTravelerWithKismetCampaignRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerJoinTravelerWithKismetCampaign(joinTravelerWithKismetCampaignRequestDto: JoinTravelerWithKismetCampaignRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerJoinTravelerWithKismetCampaign(joinTravelerWithKismetCampaignRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MaybeGetInstantBookOffersRequestDto} maybeGetInstantBookOffersRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerMaybeGetInstantBookOffers(maybeGetInstantBookOffersRequestDto: MaybeGetInstantBookOffersRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerMaybeGetInstantBookOffers(maybeGetInstantBookOffersRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterBifrostFormInputRequestDto} registerBifrostFormInputRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerRegisterBifrostFormInput(registerBifrostFormInputRequestDto: RegisterBifrostFormInputRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerRegisterBifrostFormInput(registerBifrostFormInputRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterBifrostPageVisitRequestDto} registerBifrostPageVisitRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerRegisterBifrostPageVisit(registerBifrostPageVisitRequestDto: RegisterBifrostPageVisitRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerRegisterBifrostPageVisit(registerBifrostPageVisitRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubmitBifrostFormRequestDto} submitBifrostFormRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerSubmitBifrostForm(submitBifrostFormRequestDto: SubmitBifrostFormRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerSubmitBifrostForm(submitBifrostFormRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateBifrostItineraryOfferRequestDto} updateBifrostItineraryOfferRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerUpdateBifrostItineraryOffer(updateBifrostItineraryOfferRequestDto: UpdateBifrostItineraryOfferRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerUpdateBifrostItineraryOffer(updateBifrostItineraryOfferRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateBifrostUserSessionRequestDto} updateBifrostUserSessionRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BifrostApi
     */
    public bifrostControllerUpdateBifrostUserSession(updateBifrostUserSessionRequestDto: UpdateBifrostUserSessionRequestDto, options?: RawAxiosRequestConfig) {
        return BifrostApiFp(this.configuration).bifrostControllerUpdateBifrostUserSession(updateBifrostUserSessionRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

